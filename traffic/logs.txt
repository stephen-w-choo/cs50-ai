def get_model():

    model = tf.keras.Sequential([
    tf.keras.layers.InputLayer(input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(NUM_CATEGORIES, activation="sigmoid")])
    model.compile(
        optimizer="adam",
        loss="binary_crossentropy",
        metrics=["accuracy"]
    )

    return model


Epoch 1/10
493/493 [==============================] - 1s 2ms/step - loss: 2.9468 - accuracy: 0.3652
Epoch 2/10
493/493 [==============================] - 1s 2ms/step - loss: 1.3688 - accuracy: 0.6003
Epoch 3/10
493/493 [==============================] - 1s 2ms/step - loss: 1.2700 - accuracy: 0.6642
Epoch 4/10
493/493 [==============================] - 1s 2ms/step - loss: 1.0984 - accuracy: 0.7130
Epoch 5/10
493/493 [==============================] - 1s 2ms/step - loss: 1.2132 - accuracy: 0.7284
Epoch 6/10
493/493 [==============================] - 1s 2ms/step - loss: 1.1015 - accuracy: 0.7559
Epoch 7/10
493/493 [==============================] - 1s 2ms/step - loss: 1.0929 - accuracy: 0.7669
Epoch 8/10
493/493 [==============================] - 1s 2ms/step - loss: 0.9894 - accuracy: 0.7917
Epoch 9/10
493/493 [==============================] - 1s 2ms/step - loss: 0.9126 - accuracy: 0.8097
Epoch 10/10
493/493 [==============================] - 1s 2ms/step - loss: 0.9757 - accuracy: 0.8076
329/329 - 0s - loss: 0.9789 - accuracy: 0.7973 - 477ms/epoch - 1ms/step